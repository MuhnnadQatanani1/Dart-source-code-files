class ListNode {
  late int data;
  late ListNode next;

  ListNode(int data) {
    this.data = data;
    this.next = ListNode.nullNode();
  }

  ListNode.nullNode() {
    this.data = 0;
    this.next = this;
  }
}
class LinkedList {
  late ListNode head;

  LinkedList() {
    head = ListNode.nullNode();
  }

  void addNode(int data) {
    ListNode newNode = ListNode(data);
    if (head.next == head) {
      head.next = newNode;
    } else {
      ListNode current = head;
      while (current.next != head) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  void printList() {
    ListNode current = head.next;
    while (current != head) {
      print(current.data);
      current = current.next;
    }
  }

  ListNode findMiddleNode() {
    ListNode slow = head.next;
    ListNode fast = head.next;

    while (fast != head && fast.next != head) {
      slow = slow.next;
      fast = fast.next.next;
    }

    return slow;
  }

  void reverseList() {
    ListNode prev = ListNode.nullNode();
    ListNode current = head.next;
    ListNode nextNode;

    while (current != head) {
      nextNode = current.next;
      current.next = prev;
      prev = current;
      current = nextNode;
    }

    head.next = prev;
  }

  void removeAllOccurrences(int target) {
    ListNode current = head.next;
    ListNode prev = head;

    while (current != head) {
      if (current.data == target) {
        prev.next = current.next;
      } else {
        prev = current;
      }
      current = current.next;
    }
  }
}
void main() {
  LinkedList myList = LinkedList();

  // Challenge 1: Print in Reverse
  for (int i = 1; i <= 5; i++) {
    myList.addNode(i);
  }

  print('Challenge 1: Print in Reverse');
  myList.printList(); // Original list
  print('Reversed List:');
  myList.reverseList();
  myList.printList();
  print('');

  // Challenge 2: Find the Middle Node
  myList.addNode(6);
  myList.addNode(7);
  myList.addNode(8);

  print('Challenge 2: Find the Middle Node');
  myList.printList();
  ListNode middleNode = myList.findMiddleNode();
  print('Middle Node: ${middleNode.data}');
  print('');

  // Challenge 3: Reverse a Linked List
  print('Challenge 3: Reverse a Linked List');
  myList.printList(); // Original list
  print('Reversed List:');
  myList.reverseList();
  myList.printList();
  print('');

  // Challenge 4: Remove All Occurrences
  print('Challenge 4: Remove All Occurrences');
  myList.printList(); // Original list
  print('After removing all occurrences of 3:');
  myList.removeAllOccurrences(3);
  myList.printList();
}
